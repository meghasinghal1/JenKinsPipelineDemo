name: Sast Scan Process
 
on:
  push:
    branches: [ master ]

jobs:
  sast-scan:
    runs-on: ubuntu-latest
    environment: 
      name: Dev
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Zip Repo
        shell: pwsh
        run: |
          $sourcePath = "$GITHUB_WORKSPACE"
          write-host "$sourcePath"
          $destinationPath = Split-Path -Path "$sourcePath"
          $destinationPath += "\\${{ github.event.repository.name }}-${{ github.run_number }}-${{ github.run_attempt }}.zip"
          Write-Host "$destinationPath"
          
          if(Test-Path -Path $destinationPath -PathType Leaf)
          {
              Remove-Item $destinationPath
          }
          
          Add-Type -Assembly 'System.IO.Compression.FileSystem'
          $zip = [System.IO.Compression.ZipFile]::Open($destinationPath, 'create')
          $files = [IO.Directory]::GetFiles($sourcePath, "*" , [IO.SearchOption]::AllDirectories)
         
          foreach($file in $files)
          {
              Write-Host "$file";
              $relPath = $file.Substring($sourcePath.Length).TrimStart('\\').TrimStart('/').Replace("\\\\", "/").Replace("\\", "/")
              Write-Host "$relPath";
              $a = [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zip, $file.Replace("\\\\", "/").Replace("\\", "/"), $relPath);
          }
          $zip.Dispose()
      - name: Upload Zip
        shell: pwsh
        run: |
          Write-Host "Received scanning request successfully.."
          $selfUrl = "${env:BUILD_URL}console"
          $sourcePath = "$GITHUB_WORKSPACE"
          $destinationPath = Split-Path -Path "$sourcePath"
          $destinationPath += "\\${{ github.event.repository.name }}-${{ github.run_number }}-${{ github.run_attempt }}.zip"
          Write-Host "$destinationPath"

          $buildId = "${{ github.event.repository.name }}-${{ github.run_number }}-${{ github.run_attempt }}"
          $allowDependencyScan = $false
          $allowMalwareScan = $false
          $allowLicenseScan = $false

          if("${{ vars.OFFENSIVE360SASTAPI_PROJECTID }}" -ne "")
          {
              $projectId = "${{ vars.OFFENSIVE360SASTAPI_PROJECTID }}"
          }
          if("${{ vars.OFFENSIVE360SASTAPI_ALLOWDEPENDENCYSCAN }}" -ne "")
          {
              $allowDependencyScan = "${{ vars.OFFENSIVE360SASTAPI_ALLOWDEPENDENCYSCAN }}"
          }
          if("${{ vars.OFFENSIVE360SASTAPI_ALLOWMALWARESCAN }}" -ne "")
          {
              $allowMalwareScan = "${{ vars.OFFENSIVE360SASTAPI_ALLOWMALWARESCAN }}"
          }
          if("${{ vars.OFFENSIVE360SASTAPI_ALLOWLICENSESCAN }}" -ne "")
          {
              $allowLicenseScan = "${{ vars.OFFENSIVE360SASTAPI_ALLOWLICENSESCAN }}"
          }

          $projectName = "$buildId"
          $boundary = [System.Guid]::NewGuid().ToString()

          Write-Host "Starting scanning for the project name [$projectName], accessToken [${{ secrets.OFFENSIVE360SASTAPI_ACCESSTOKEN }}], url [${{ vars.OFFENSIVE360SASTAPI_BASEURL }}], buildId [$buildId], filePath [$destinationPath], boundary [$boundary], projectId [$projectId], AllowDependencyScan [$allowDependencyScan], AllowMalwareScan [$allowMalwareScan], AllowLicenseScan [$allowLicenseScan]"

          $fileBytes = [System.IO.File]::ReadAllBytes($destinationPath)
          $fileContent = [System.Text.Encoding]::GetEncoding('iso-8859-1').GetString($fileBytes)
          Write-Host $fileContent
          $LF = "`r`n"
          $bodyLines = (
           "--$boundary",
           "Content-Disposition: form-data; name=`"name`"$LF",
           "$projectName",
           "--$boundary",
           "Content-Disposition: form-data; name=`"projectId`"$LF",
           "$projectId",
           "--$boundary",
           "Content-Disposition: form-data; name=`"keepInvisibleAndDeletePostScan`"$LF",
           "false",
           "--$boundary",
           "Content-Disposition: form-data; name=`"allowDependencyScan`"$LF",
           "$allowDependencyScan",
           "--$boundary",
           "Content-Disposition: form-data; name=`"allowMalwareScan`"$LF",
           "$allowMalwareScan",
           "--$boundary",
           "Content-Disposition: form-data; name=`"allowLicenseScan`"$LF",
           "$allowLicenseScan",
           "--$boundary",
           "Content-Disposition: form-data; name=`"externalScanSourceType`"$LF",
           "Github",
           "--$boundary",
           "Content-Disposition: form-data; name=`"pipelineUrl`"$LF",
           "$selfUrl",
           "--$boundary",
           "Content-Disposition: form-data; name=`"fileSource`"; filename=`"$projectName.zip`"",
           "Content-Type: application/x-zip-compressed$LF",
           $fileContent,
           "--$boundary--$LF"
          ) -join $LF

          $apiResponse = Invoke-RestMethod -Method Post -Uri ("{0}/app/api/externalScan" -f "${{ vars.OFFENSIVE360SASTAPI_BASEURL }}".TrimEnd('/')) -ContentType "multipart/form-data; boundary=`"$boundary`"" -Headers @{"Accept" = "application/json"; "Authorization" = "Bearer ${{ secrets.OFFENSIVE360SASTAPI_ACCESSTOKEN }}"} -Body $bodyLines

          write-host ("Total Vulnerabilities Count : {0}" -f $apiResponse.vulnerabilities.length)
          write-host ("Total Malwares Count : {0}" -f $apiResponse.malwares.length)
          write-host ("Total Licenses Count : {0}" -f $apiResponse.licenses.length)
          write-host ("Total Dependency Vulnerabilities Count : {0}" -f $apiResponse.dependencyVulnerabilities.length)

          if (($apiResponse.vulnerabilities.length -gt 0 -or $apiResponse.malwares.length -gt 0 -or $apiResponse.licenses.length -gt 0 -or $apiResponse.dependencyVulnerabilities.length -gt 0) -and "$env:ADO_BreakBuildWhenVulnsFound" -eq 'True') 
          {
           write-host "\n\n**********************************************************************************************************************"
           write-host ("Offensive 360 vulnerability dashboard : {0}/scan/{1}" -f "${{ vars.OFFENSIVE360SASTUI_BASEURL }}".TrimEnd('/'), $apiResponse.projectId)
           write-host "**********************************************************************************************************************\n\n"
           throw [System.Exception] "Vulnerabilities found and breaking the build."
          }
          elseif ($apiResponse.vulnerabilities.length -gt 0 -and "${{ vars.ADO_BREAKBUILDWHENVULNSFOUND }}" -ne 'True') 
          {
              Write-Warning 'Vulnerabilities found and since ADO_BreakBuildWhenVulnsFound is set to false so continuing to build it.'
          }
          else
          {
              Write-Warning 'No vulnerabilities found and continuing to build it.'
          }

          if(Test-Path -Path $destinationPath -PathType Leaf)
          {
              Remove-Item $destinationPath
          }
