pipeline {
    agent any

    stages {
        stage('zipRepo') {
            steps {
                script {
                    // Define the source and destination paths
                    def sourcePath = env.WORKSPACE
                    def destinationPath = "${env.WORKSPACE}/${env.JOB_NAME}-${env.BUILD_NUMBER}.zip"
                    
                    echo "Source Path: ${sourcePath}"
                    echo "Destination Path: ${destinationPath}"

                    // Remove the destination file if it exists
                    if (fileExists(destinationPath)) {
                        echo "Removing existing ZIP file."
                        deleteFile(destinationPath)
                    } else {
                        echo "No existing ZIP file to remove."
                    }

                    // Create ZIP file
                    try {
                        //sh "cd ${sourcePath} && zip -r ${destinationPath} ."
                        zip zipFile: destinationPath, archive: true, dir: sourcePath, overwrite: true
                        echo "ZIP file created successfully."
                    } catch (Exception e) {
                        error("Failed to create ZIP file: ${e.message}")
                    }

                    // Verify if the ZIP file was created
                    if (fileExists(destinationPath)) {
                        echo "ZIP file is present."
                    } else {
                        echo "ZIP file was not created."
                    }
                }
            }
        }
        stage('uploadZip') {
            steps {
                script {
                    echo "Received scanning request successfully.."

                    def selfUrl = "${env.BUILD_URL}console"
                    def filePath = "${env.WORKSPACE}/${env.JOB_NAME}-${env.BUILD_NUMBER}.zip"
                    echo "File Path: ${filePath}"

                    def buildId = "${env.JOB_NAME}-${env.BUILD_NUMBER}"
                    def projectId = env.Offensive360SastApi_ProjectId ?: ''
                    def allowDependencyScan = env.Offensive360SastApi_AllowDependencyScan ?: 'false'
                    def allowMalwareScan = env.Offensive360SastApi_AllowMalwareScan ?: 'false'
                    def allowLicenseScan = env.Offensive360SastApi_AllowLicenseScan ?: 'false'

                    def projectName = buildId
                    def boundary = UUID.randomUUID().toString()

                    echo "Starting scanning for project name [$projectName]..."
                    echo "a00000000000..."
                    def fileBytes = readFile(filePath).bytes
                    echo "a11111111111111..."
                    def fileContent = new String(fileBytes, 'ISO-8859-1')

                    echo "aaaaaaaaaaa..."

                    def bodyLines = [
                        "--$boundary",
                        "Content-Disposition: form-data; name=\"name\"",
                        projectName,
                        "--$boundary",
                        "Content-Disposition: form-data; name=\"projectId\"",
                        projectId,
                        "--$boundary",
                        "Content-Disposition: form-data; name=\"keepInvisibleAndDeletePostScan\"",
                        "false",
                        "--$boundary",
                        "Content-Disposition: form-data; name=\"allowDependencyScan\"",
                        allowDependencyScan,
                        "--$boundary",
                        "Content-Disposition: form-data; name=\"allowMalwareScan\"",
                        allowMalwareScan,
                        "--$boundary",
                        "Content-Disposition: form-data; name=\"allowLicenseScan\"",
                        allowLicenseScan,
                        "--$boundary",
                        "Content-Disposition: form-data; name=\"externalScanSourceType\"",
                        "Jenkins",
                        "--$boundary",
                        "Content-Disposition: form-data; name=\"pipelineUrl\"",
                        selfUrl,
                        "--$boundary",
                        "Content-Disposition: form-data; name=\"fileSource\"; filename=\"$projectName.zip\"",
                        "Content-Type: application/x-zip-compressed",
                        fileContent,
                        "--$boundary--"
                    ].join("\r\n")
                    echo "bbbbbbbbbb..."
                    // Send the HTTP request
                    def response = httpRequest(
                        url: "${env.Offensive360SastApi_BaseUrl.trim()}/app/api/externalScan",
                        requestBody: bodyLines,
                        contentType: 'MULTIPART',
                        customHeaders: [
                            [name: 'Authorization', value: "Bearer ${env.Offensive360SastApi_AccessToken}"],
                            [name: 'Accept', value: 'application/json']
                        ]
                    )
                    echo "ccccccccccc..."
                    def jsonResponse = readJSON(text: response.content)
                    echo "dddddddddddd..."
                    echo "Total Vulnerabilities Count: ${jsonResponse.vulnerabilities.size()}"
                    echo "Total Malwares Count: ${jsonResponse.malwares.size()}"
                    echo "Total Licenses Count: ${jsonResponse.licenses.size()}"
                    echo "Total Dependency Vulnerabilities Count: ${jsonResponse.dependencyVulnerabilities.size()}"

                    if ((jsonResponse.vulnerabilities.size() > 0 || jsonResponse.malwares.size() > 0 ||
                         jsonResponse.licenses.size() > 0 || jsonResponse.dependencyVulnerabilities.size() > 0) &&
                        env.Pipeline_BreakBuildWhenVulnsFound == 'True') {
                        error("Vulnerabilities found and breaking the build.")
                    } else if (jsonResponse.vulnerabilities.size() > 0) {
                        warning("Vulnerabilities found but continuing the build as per configuration.")
                    } else {
                        warning("No vulnerabilities found, continuing the build.")
                    }

                    echo "Finished SAST file scanning."

                    // Remove the zip file after upload
                    if (fileExists(filePath)) {
                        deleteFile(filePath)
                    }
                }
            }
        }
    }
}
