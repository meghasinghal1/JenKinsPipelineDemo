import java.nio.file.*
import java.util.zip.*

pipeline {
    agent any
    stages {
        stage('zipRepo') {
            steps {
                script {
                    def sourcePath = env.WORKSPACE
                    def destinationPath = "${env.WORKSPACE}/${env.JOB_NAME}-${env.BUILD_NUMBER}.zip"
                    
                    echo "Source Path: ${sourcePath}"
                    echo "Destination Path: ${destinationPath}"

                    if (fileExists(destinationPath)) {
                        echo "Removing existing ZIP file."
                        if (isUnix()) {
                            sh "rm ${destinationPath}"
                        } else {
                            bat "del ${destinationPath}"
                        }
                    } else {
                        echo "No existing ZIP file to remove."
                    }

                    try {
                        def sourceDir = new File(sourcePath)
                        if (isUnix()) {
                           ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(destinationPath))
                            try {
                                // Traverse through all files and directories
                                Files.walk(Paths.get(sourcePath)).each { path ->
                                    if (Files.isRegularFile(path)) {
                                        // Create the relative path for the ZIP entry
                                        def relativePath = sourcePath.relativize(path.toString()).toString().replace("\\\\", "/").replace("\\", "/")
                                        ZipEntry zipEntry = new ZipEntry(relativePath)
                                        zos.putNextEntry(zipEntry)
    
                                        // Stream the file into the ZIP
                                        Files.copy(path, zos)
                                        zos.closeEntry()
                                    }
                                }
                            } finally {
                                zos.close() // Ensure the ZipOutputStream is closed
                            }
                        } else {
                            bat "powershell -Command \"Compress-Archive -Path ${sourcePath} -DestinationPath ${destinationPath}\""
                        }
                        echo "ZIP file created successfully."
                    } catch (Exception e) {
                        error("Failed to create ZIP file: ${e.message}")
                    }

                    if (fileExists(destinationPath)) {
                        echo "ZIP file is present."
                    } else {
                        echo "ZIP file was not created."
                    }
                }
            }
        }
        stage('uploadZip') {
            steps {
                script {
                    echo "Received scanning request successfully.."
                    def filePath = "${env.WORKSPACE}/${env.JOB_NAME}-${env.BUILD_NUMBER}.zip"
                    def boundary = UUID.randomUUID().toString()

                    def post = new URL("${env.Offensive360SastApi_BaseUrl.trim()}/app/api/externalScan").openConnection()
                    post.setRequestMethod("POST")
                    post.setDoOutput(true)
                    post.setRequestProperty('Content-Type', "multipart/form-data; boundary=${boundary}")
                    post.setRequestProperty('Authorization', "Bearer ${env.Offensive360SastApi_AccessToken}")
                    post.setRequestProperty('Accept', 'application/json')

                    // Prepare the output stream
                    def outputStream = post.outputStream

                    // Write the parameters
                    outputStream.write("--${boundary}\r\n".getBytes())
                    outputStream.write("Content-Disposition: form-data; name=\"ProjectId\"\r\n\r\n${env.Offensive360SastApi_ProjectId}\r\n".getBytes())
                    outputStream.write("--${boundary}\r\n".getBytes())
                    outputStream.write("Content-Disposition: form-data; name=\"Name\"\r\n\r\n${env.JOB_NAME}\r\n".getBytes())
                    outputStream.write("--${boundary}\r\n".getBytes())
                    outputStream.write("Content-Disposition: form-data; name=\"AllowMalwareScan\"\r\n\r\n${env.Offensive360SastApi_AllowMalwareScan}\r\n".getBytes())
                    outputStream.write("--${boundary}\r\n".getBytes())
                    outputStream.write("Content-Disposition: form-data; name=\"AllowLicenseScan\"\r\n\r\n${env.Offensive360SastApi_AllowLicenseScan}\r\n".getBytes())
                    outputStream.write("--${boundary}\r\n".getBytes())
                    outputStream.write("Content-Disposition: form-data; name=\"AllowDependencyScan\"\r\n\r\n${env.Offensive360SastApi_AllowDependencyScan}\r\n".getBytes())

                    // Write the file
                    outputStream.write("--${boundary}\r\n".getBytes())
                    outputStream.write("Content-Disposition: form-data; name=\"FileSource\"; filename=\"${env.JOB_NAME}-${env.BUILD_NUMBER}.zip\"\r\n".getBytes())
                    outputStream.write("Content-Type: application/zip\r\n\r\n".getBytes())

                    // Stream the file directly to the output stream
                    def fileInputStream = new File(filePath).newInputStream()
                    try {
                        fileInputStream.transferTo(outputStream)
                    } finally {
                        fileInputStream.close()  // Ensure the input stream is closed
                    }

                    outputStream.write("\r\n--${boundary}--\r\n".getBytes())
                    outputStream.close()  // Close the output stream after writing

                    // Get response and read it
                    int responseCode = post.responseCode
                    println "Response Code: ${responseCode}"

                    if (responseCode != 200) {
                        def errorResponse = post.errorStream?.text
                        error("Request failed with response code ${responseCode}: ${errorResponse}")
                    }

                    // Read and parse the response
                    def jsonResponse = new groovy.json.JsonSlurper().parse(post.inputStream)

                    def vulnerabilitiesCount = jsonResponse.vulnerabilities?.size() ?: 0
                    def malwaresCount = jsonResponse.malwares?.size() ?: 0
                    def licensesCount = jsonResponse.licenses?.size() ?: 0
                    def dependencyVulnerabilitiesCount = jsonResponse.dependencyVulnerabilities?.size() ?: 0

                    echo "Total Vulnerabilities Count: ${vulnerabilitiesCount}"
                    echo "Total Malwares Count: ${malwaresCount}"
                    echo "Total Licenses Count: ${licensesCount}"
                    echo "Total Dependency Vulnerabilities Count: ${dependencyVulnerabilitiesCount}"

                    // Handle vulnerabilities based on response
                    if ((vulnerabilitiesCount > 0 || malwaresCount > 0 || licensesCount > 0 || dependencyVulnerabilitiesCount > 0) &&
                        env.Pipeline_BreakBuildWhenVulnsFound == 'True') {
                        error("Vulnerabilities found and breaking the build.")
                    } else if (vulnerabilitiesCount > 0) {
                        echo "WARNING: Vulnerabilities found but continuing the build as per configuration."
                    } else {
                        echo "No vulnerabilities found, continuing the build."
                    }

                    echo "Finished SAST file scanning."

                    // Remove the zip file after upload
                    //if (fileExists(filePath)) {
                        echo "aaa...."
                        deleteFile(filePath)
                   // }
                    echo "bbb...."
                }
            }
        }
    }
}
