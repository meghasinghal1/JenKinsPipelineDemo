pipeline {
    agent any

    stages {
        stage('zipRepo') {
            steps {
                script {
                    // Define a reusable function for zipping files
                    def zipFiles = { isWindows ->
                        if (isWindows) {
                            bat '''
                                set sourcePath=%WORKSPACE%
                                set destinationPath=%sourcePath%\\%JOB_NAME%-%BUILD_NUMBER%.zip

                                if exist "%destinationPath%" (
                                    del "%destinationPath%"
                                )

                                powershell -command "Add-Type -Assembly 'System.IO.Compression.FileSystem'; \
                                $zip = [System.IO.Compression.ZipFile]::Open('%destinationPath%', 'create'); \
                                $files = Get-ChildItem -Path '%sourcePath%' -Recurse; \
                                foreach ($file in $files) { \
                                    $relPath = $file.FullName.Substring($sourcePath.Length + 1); \
                                    [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zip, $file.FullName, $relPath); \
                                }; \
                                $zip.Dispose();"
                            '''
                        } else {
                            sh '''
                                zip -r "${WORKSPACE}/${JOB_NAME}-${BUILD_NUMBER}.zip" "${WORKSPACE}/."
                            '''
                        }
                    }

                    // Check if the agent is running on Windows
                    def isWindows = isUnix() ? false : true

                    // Call the zip function
                    zipFiles(isWindows)
                }
            }
        }

        stage('uploadZip') {
            steps {
                script {
                    // Set the zip file path
                    def zipFilePath = isUnix() ? "${env.WORKSPACE}/${env.JOB_NAME}-${env.BUILD_NUMBER}.zip" : "${env.WORKSPACE}\\${env.JOB_NAME}-${env.BUILD_NUMBER}.zip"

                    // Check if the zip file exists
                    if (!fileExists(zipFilePath)) {
                        error "Zip file does not exist: ${zipFilePath}"
                    }

                    // Prepare the upload command
                    def uploadCommand = isWindows ? '''
                        set zipFilePath=%WORKSPACE%\\%JOB_NAME%-%BUILD_NUMBER%.zip
                        curl -X POST "%Offensive360SastApi_BaseUrl%/app/api/externalScan" ^
                        -H "Content-Type: multipart/form-data" ^
                        -F "fileSource=@%zipFilePath%" ^
                        -H "Authorization: Bearer %Offensive360SastApi_AccessToken%" ^
                        -H "Accept: application/json"
                    ''' : '''
                        curl -X POST "${env.Offensive360SastApi_BaseUrl}/app/api/externalScan" \
                        -H "Content-Type: multipart/form-data" \
                        -F "fileSource=@${zipFilePath}" \
                        -H "Authorization: Bearer ${env.Offensive360SastApi_AccessToken}" \
                        -H "Accept: application/json"
                    '''

                    // Execute the upload command
                    if (isWindows) {
                        bat uploadCommand
                    } else {
                        sh uploadCommand
                    }
                }
            }
        }
    }
}
