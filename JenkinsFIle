pipeline {
    agent any
    stages {
        stage('zipRepo') {
            steps {
                script {
                    def sourcePath = env.WORKSPACE
                    def destinationPath = "${env.WORKSPACE}/${env.JOB_NAME}-${env.BUILD_NUMBER}.zip"
                    
                    echo "Source Path: ${sourcePath}"
                    echo "Destination Path: ${destinationPath}"

                    if (fileExists(destinationPath)) {
                        echo "Removing existing ZIP file."
                        if (isUnix()) {
                            sh "rm ${destinationPath}"
                        } else {
                            bat "del ${destinationPath}"
                        }
                    } else {
                        echo "No existing ZIP file to remove."
                    }

                    try {
                        if (isUnix()) {
                            sh "zip -r ${destinationPath} ${sourcePath}"
                        } else {
                            bat "powershell -Command \"Compress-Archive -Path ${sourcePath} -DestinationPath ${destinationPath}\""
                        }
                        echo "ZIP file created successfully."
                    } catch (Exception e) {
                        error("Failed to create ZIP file: ${e.message}")
                    }

                    if (fileExists(destinationPath)) {
                        echo "ZIP file is present."
                    } else {
                        echo "ZIP file was not created."
                    }
                }
            }
        }
        stage('uploadZip') {
            steps {
                script {
                    echo "Received scanning request successfully.."
                    def filePath = "${env.WORKSPACE}/${env.JOB_NAME}-${env.BUILD_NUMBER}.zip"
                    def boundary = UUID.randomUUID().toString()
                    
                    // Create multipart form-data content
                    def formData = "--${boundary}\r\n" +
                                   "Content-Disposition: form-data; name=\"file\"; filename=\"${env.JOB_NAME}-${env.BUILD_NUMBER}.zip\"\r\n" +
                                   "Content-Type: application/zip\r\n\r\n" +
                                   readFile(filePath).bytes.encodeBase64().toString() +
                                   "\r\n--${boundary}--\r\n"
                    
                    // Write form-data content to a temporary file
                    def tempFilePath = "${env.WORKSPACE}/tempfile.txt"
                    writeFile file: tempFilePath, text: formData

                    // Perform the HTTP request
                    sh """
                    curl -X POST -H "Content-Type: multipart/form-data; boundary=${boundary}" \
                         -H "Authorization: Bearer ${env.Offensive360SastApi_AccessToken}" \
                         -H "Accept: application/json" \
                         --data-binary @${tempFilePath} \
                         ${env.Offensive360SastApi_BaseUrl.trim()}/app/api/externalScan
                    """

                    // Clean up temporary file
                    if (fileExists(tempFilePath)) {
                        deleteFile(tempFilePath)
                    }
                }
            }
        }
    }
}
