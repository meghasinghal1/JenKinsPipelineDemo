pipeline {
    agent any
    stages {
        stage('zipRepo') {
            steps {
                script {
                    def sourcePath = env.WORKSPACE
                    def destinationPath = "${env.WORKSPACE}/${env.JOB_NAME}-${env.BUILD_NUMBER}.zip"
                    
                    echo "Source Path: ${sourcePath}"
                    echo "Destination Path: ${destinationPath}"

                    if (fileExists(destinationPath)) {
                        echo "Removing existing ZIP file."
                        if (isUnix()) {
                            sh "rm ${destinationPath}"
                        } else {
                            bat "del ${destinationPath}"
                        }
                    } else {
                        echo "No existing ZIP file to remove."
                    }

                    try {
                        if (isUnix()) {
                            sh "zip -r ${destinationPath} ${sourcePath}"
                        } else {
                            bat "powershell -Command \"Compress-Archive -Path ${sourcePath} -DestinationPath ${destinationPath}\""
                        }
                        echo "ZIP file created successfully."
                    } catch (Exception e) {
                        error("Failed to create ZIP file: ${e.message}")
                    }

                    if (fileExists(destinationPath)) {
                        echo "ZIP file is present."
                    } else {
                        echo "ZIP file was not created."
                    }
                }
            }
        }
        stage('uploadZip') {
            steps {
                script {
                    echo "Received scanning request successfully.."
                    def filePath = "${env.WORKSPACE}/${env.JOB_NAME}-${env.BUILD_NUMBER}.zip"
                    def boundary = UUID.randomUUID().toString()

                    def post = new URL("${env.Offensive360SastApi_BaseUrl.trim()}/app/api/externalScan").openConnection()
                    post.setRequestMethod("POST")
                    post.setDoOutput(true)
                    post.setRequestProperty('Content-Type', "multipart/form-data; boundary=${boundary}")
                    post.setRequestProperty('Authorization', "Bearer ${env.Offensive360SastApi_AccessToken}")
                    post.setRequestProperty('Accept', 'application/json')

                    // Write the file to the output stream
                    def newLine = "\r\n"
                    post.outputStream.withWriter { writer ->
                        writer.write("--${boundary}${newLine}")
                        writer.write("Content-Disposition: form-data; name=\"file\"; filename=\"${filePath}\"${newLine}")
                        writer.write("Content-Type: application/zip${newLine}${newLine}")
                        writer.write(readFile(filePath).bytes as String)
                        writer.write("${newLine}--${boundary}--${newLine}")
                    }

                    // Get response
                    int responseCode = post.responseCode
                    println "Response Code: ${responseCode}"

                    // Read and parse the response
                    def jsonResponse = new groovy.json.JsonSlurper().parse(post.inputStream)
                    echo "Total Vulnerabilities Count: ${jsonResponse.vulnerabilities.size()}"
                    echo "Total Malwares Count: ${jsonResponse.malwares.size()}"
                    echo "Total Licenses Count: ${jsonResponse.licenses.size()}"
                    echo "Total Dependency Vulnerabilities Count: ${jsonResponse.dependencyVulnerabilities.size()}"

                    if ((jsonResponse.vulnerabilities.size() > 0 || jsonResponse.malwares.size() > 0 ||
                         jsonResponse.licenses.size() > 0 || jsonResponse.dependencyVulnerabilities.size() > 0) &&
                        env.Pipeline_BreakBuildWhenVulnsFound == 'True') {
                        error("Vulnerabilities found and breaking the build.")
                    } else if (jsonResponse.vulnerabilities.size() > 0) {
                        warning("Vulnerabilities found but continuing the build as per configuration.")
                    } else {
                        warning("No vulnerabilities found, continuing the build.")
                    }

                    echo "Finished SAST file scanning."

                    // Remove the zip file after upload
                    if (fileExists(filePath)) {
                        deleteFile(filePath)
                    }
                }
            }
        }
    }
}
