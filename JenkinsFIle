pipeline {
    agent any
    stages {
        stage('zipRepo') {
            steps {
                script {
                    def sourcePath = env.WORKSPACE
                    def destinationPath = "${env.WORKSPACE}/${env.JOB_NAME}-${env.BUILD_NUMBER}.zip"
                    
                    echo "Source Path: ${sourcePath}"
                    echo "Destination Path: ${destinationPath}"

                    if (fileExists(destinationPath)) {
                        echo "Removing existing ZIP file."
                        if (isUnix()) {
                            sh "rm ${destinationPath}"
                        } else {
                            bat "del ${destinationPath}"
                        }
                    } else {
                        echo "No existing ZIP file to remove."
                    }

                    try {
                        if (isUnix()) {
                            sh "zip -r ${destinationPath} ${sourcePath}"
                        } else {
                            bat "powershell -Command \"Compress-Archive -Path ${sourcePath} -DestinationPath ${destinationPath}\""
                        }
                        echo "ZIP file created successfully."
                    } catch (Exception e) {
                        error("Failed to create ZIP file: ${e.message}")
                    }

                    if (fileExists(destinationPath)) {
                        echo "ZIP file is present."
                    } else {
                        echo "ZIP file was not created."
                    }
                }
            }
        }
        stage('uploadZip') {
            steps {
                script {
                    echo "Received scanning request successfully.."
                    def selfUrl = "${env.BUILD_URL}console"
                    def filePath = "${env.WORKSPACE}/${env.JOB_NAME}-${env.BUILD_NUMBER}.zip"
                    echo "File Path: ${filePath}"
                    def buildId = "${env.JOB_NAME}-${env.BUILD_NUMBER}"
                    def projectId = env.Offensive360SastApi_ProjectId ?: ''
                    def allowDependencyScan = env.Offensive360SastApi_AllowDependencyScan ?: 'false'
                    def allowMalwareScan = env.Offensive360SastApi_AllowMalwareScan ?: 'false'
                    def allowLicenseScan = env.Offensive360SastApi_AllowLicenseScan ?: 'false'
                    def projectName = buildId

                    echo "Starting scanning for project name [$projectName]..."

                    def fileBytes = readFile(filePath).bytes
                    echo "aaaaaaaaaaa..."
                    def fileContent = new String(fileBytes, 'ISO-8859-1')
                    echo "bbbbbbbb..."
                    
                    def post = new URL("${env.Offensive360SastApi_BaseUrl.trim()}/app/api/externalScan").openConnection();
                    def message = '{"message":"this is a message"}'
                    post.setRequestMethod("POST")
                    post.setDoOutput(true)
                    post.setRequestProperty('Content-Type', "multipart/form-data; boundary=${boundary}")
                    post.setRequestProperty('Authorization', "Bearer ${env.Offensive360SastApi_AccessToken}")
                    post.setRequestProperty('Accept', 'application/json')
                    
                    def boundary = "--boundary\r\n"
                    def newLine = "\r\n"
                    def outputStream = connection.outputStream
                
                    // Add bodyLines as part of the request
                    bodyLines.each { line ->
                        outputStream.write(boundary.getBytes())
                        outputStream.write("Content-Disposition: form-data; name=\"file\"\r\n".getBytes())
                        outputStream.write(newLine.getBytes())
                        outputStream.write(line.getBytes())
                        outputStream.write(newLine.getBytes())
                    }
                    outputStream.write((boundary + "--").getBytes())
                    outputStream.close()
                
                    // Get response
                    int responseCode = connection.responseCode
                    println "Response Code: ${responseCode}"
                
                    def jsonResponse = [:]
                    if (responseCode == HttpURLConnection.HTTP_OK) {
                        JsonReader jsonReader = Json.createReader(connection.inputStream)
                        jsonResponse = jsonReader.readObject()
                        jsonReader.close()
                    }
                
                    connection.disconnect()

                    echo "ddddddddddd..."
                    def jsonResponse = readJSON(text: response.content)

                    echo "Total Vulnerabilities Count: ${jsonResponse.vulnerabilities.size()}"
                    echo "Total Malwares Count: ${jsonResponse.malwares.size()}"
                    echo "Total Licenses Count: ${jsonResponse.licenses.size()}"
                    echo "Total Dependency Vulnerabilities Count: ${jsonResponse.dependencyVulnerabilities.size()}"

                    if ((jsonResponse.vulnerabilities.size() > 0 || jsonResponse.malwares.size() > 0 ||
                         jsonResponse.licenses.size() > 0 || jsonResponse.dependencyVulnerabilities.size() > 0) &&
                        env.Pipeline_BreakBuildWhenVulnsFound == 'True') {
                        error("Vulnerabilities found and breaking the build.")
                    } else if (jsonResponse.vulnerabilities.size() > 0) {
                        warning("Vulnerabilities found but continuing the build as per configuration.")
                    } else {
                        warning("No vulnerabilities found, continuing the build.")
                    }

                    echo "Finished SAST file scanning."

                    // Remove the zip file after upload
                    if (fileExists(filePath)) {
                        deleteFile(filePath)
                    }
                }
            }
        }
    }
}
