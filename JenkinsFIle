pipeline {
    agent any
    stages {
        stage('zipRepo') {
            steps {
                script {
                    def sourcePath = env.WORKSPACE
                    def destinationPath = "${env.WORKSPACE}/${env.JOB_NAME}-${env.BUILD_NUMBER}.zip"
                    
                    echo "Source Path: ${sourcePath}"
                    echo "Destination Path: ${destinationPath}"

                    if (fileExists(destinationPath)) {
                        echo "Removing existing ZIP file."
                        if (isUnix()) {
                            sh "rm ${destinationPath}"
                        } else {
                            bat "del ${destinationPath}"
                        }
                    } else {
                        echo "No existing ZIP file to remove."
                    }

                    try {
                        if (isUnix()) {
                            sh "zip -r ${destinationPath} ${sourcePath}"
                        } else {
                            bat "powershell -Command \"Compress-Archive -Path ${sourcePath} -DestinationPath ${destinationPath}\""
                        }
                        echo "ZIP file created successfully."
                    } catch (Exception e) {
                        error("Failed to create ZIP file: ${e.message}")
                    }

                    if (fileExists(destinationPath)) {
                        echo "ZIP file is present."
                    } else {
                        echo "ZIP file was not created."
                    }
                }
            }
        }
        stage('uploadZip') {
            steps {
                script {
                    echo "Received scanning request successfully.."
                    def filePath = "${env.WORKSPACE}/${env.JOB_NAME}-${env.BUILD_NUMBER}.zip"
                    def boundary = UUID.randomUUID().toString()
                    
                    // Create temporary file to hold the multipart form data
                    def tempFile = new File("${env.WORKSPACE}/tempfile.txt")
                    tempFile.withWriter('UTF-8') { writer ->
                        writer << "--${boundary}\r\n"
                        writer << "Content-Disposition: form-data; name=\"file\"; filename=\"${env.JOB_NAME}-${env.BUILD_NUMBER}.zip\"\r\n"
                        writer << "Content-Type: application/zip\r\n\r\n"
                        writer.flush()
                        writer.write(new String(readFile(filePath).bytes))
                        writer.flush()
                        writer << "\r\n--${boundary}--\r\n"
                    }

                    def postRequest = { 
                        HttpURLConnection conn = new URL("${env.Offensive360SastApi_BaseUrl.trim()}/app/api/externalScan").openConnection()
                        conn.doOutput = true
                        conn.requestMethod = 'POST'
                        conn.setRequestProperty('Content-Type', "multipart/form-data; boundary=${boundary}")
                        conn.setRequestProperty('Authorization', "Bearer ${env.Offensive360SastApi_AccessToken}")
                        conn.setRequestProperty('Accept', 'application/json')

                        conn.outputStream.withStream { output ->
                            tempFile.eachLine { line ->
                                output.write(line.bytes)
                            }
                        }

                        if (conn.responseCode != HttpURLConnection.HTTP_OK) {
                            throw new IOException("Failed to upload file: ${conn.responseMessage}")
                        }
                        
                        def jsonResponse = new groovy.json.JsonSlurper().parse(conn.inputStream)
                        return jsonResponse
                    }

                    def response = postRequest()
                    echo "Response from server: ${response}"

                    // Clean up temporary file
                    tempFile.delete()
                }
            }
        }
    }
}
